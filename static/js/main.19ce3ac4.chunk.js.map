{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y9BAWeA,G,MARG,SAACC,GAAD,OACjB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAU,8BACzD,yBAAKA,UAAU,iBACd,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCDrBC,G,MAFC,SAACT,GAAD,OAAW,yBAAKI,UAAU,WAAWJ,EAAMU,YCE5CC,G,MAFD,SAACX,GAAD,OAAW,wBAAII,UAAU,SAASJ,EAAMU,Y,OCIlDE,G,MAAiB,GACjBC,EAAY,EACZC,EAAe,4DA+GJC,E,4MA3GdC,MAAQ,CACPC,UACAL,iBACAC,YACAC,gB,EAGDZ,WAAa,SAACC,GAEb,IAAMc,EAAU,EAAKD,MAAMC,QAGrBC,EAAeD,EAAQE,QAAO,SAACC,GAAD,OAAWA,EAAMjB,KAAOA,KAI5D,GAAIe,EAAa,GAAGG,QAAS,CAC5BC,QAAQC,IAAI,oBAAsBX,GAClCU,QAAQC,IAAI,eAAiBV,GAE7BD,EAAiB,EACjBE,EAAe,mCAEf,IAAK,IAAIU,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IACnCP,EAAQO,GAAGH,SAAU,EAGtB,EAAKK,SAAS,CAACZ,iBACf,EAAKY,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACT,iBAGT,GAAIL,EAAiB,GAE3BM,EAAa,GAAGG,SAAU,EAG1BT,IAEAE,EAAe,2BAEXF,EAAiBC,IACpBA,EAAYD,EACZ,EAAKc,SAAS,CAACb,eAIhBI,EAAQU,MAAK,SAAUC,EAAGC,GACzB,MAAO,GAAMC,KAAKC,YAInB,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,qBACT,CAENI,EAAa,GAAGG,SAAU,EAG1BT,EAAiB,EAGjBE,EAAe,+BACfD,EAAY,GACZ,EAAKa,SAAS,CAACb,cAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IACnCP,EAAQO,GAAGH,SAAU,EAItBJ,EAAQU,MAAK,SAAUC,EAAGC,GACzB,MAAO,GAAMC,KAAKC,YAInB,EAAKL,SAAS,CAACT,YACf,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,mB,uDAIP,IAAD,OACR,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,0BAEA,wBAAIV,UAAU,sCAAsC4B,KAAKhB,MAAMF,cAE/D,wBAAIV,UAAU,iDAAd,oBACmB4B,KAAKhB,MAAMJ,eAC7B,6BAFD,eAGcoB,KAAKhB,MAAMH,WAEzB,yBAAKT,UAAU,aACd,yBAAKA,UAAU,OACb4B,KAAKhB,MAAMC,QAAQgB,KAAI,SAACb,GAAD,OACvB,kBAAC,EAAD,CAAWlB,WAAY,EAAKA,WAAYC,GAAIiB,EAAMjB,GAAI+B,IAAKd,EAAMjB,GAAIK,MAAOY,EAAMZ,kB,GApGvE2B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.19ce3ac4.chunk.js","sourcesContent":["import React from 'react';\nimport './MatchCard.css';\n\nconst MatchCard = (props) => (\n\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3 card-img-top\">\n\t\t<div className=\"img-container\">\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t</div>\n);\n\nexport default MatchCard;\n","import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = (props) => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from 'react';\nimport './Title.css';\n\nconst Title = (props) => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React, {Component} from 'react';\nimport MatchCard from './components/MatchCard';\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport matches from './matchcards.json';\nimport './App.css';\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = 'Click on a character without repeating same person twice!';\n\nclass App extends Component {\n\t// Setting this.state.matches to the matches json array\n\tstate = {\n\t\tmatches,\n\t\tcorrectGuesses,\n\t\tbestScore,\n\t\tclickMessage,\n\t};\n\n\tsetClicked = (id) => {\n\t\t// Make a copy of the state matches array to work with\n\t\tconst matches = this.state.matches;\n\n\t\t// Filter for the clicked match\n\t\tconst clickedMatch = matches.filter((match) => match.id === id);\n\n\t\t// If the matched image's clicked value is already true,\n\t\t// do the game over actions\n\t\tif (clickedMatch[0].clicked) {\n\t\t\tconsole.log('Correct Guesses: ' + correctGuesses);\n\t\t\tconsole.log('Best Score: ' + bestScore);\n\n\t\t\tcorrectGuesses = 0;\n\t\t\tclickMessage = 'Oops, You have clicked this one!';\n\n\t\t\tfor (let i = 0; i < matches.length; i++) {\n\t\t\t\tmatches[i].clicked = false;\n\t\t\t}\n\n\t\t\tthis.setState({clickMessage});\n\t\t\tthis.setState({correctGuesses});\n\t\t\tthis.setState({matches});\n\n\t\t\t// Otherwise, if clicked = false, and the user hasn't finished\n\t\t} else if (correctGuesses < 11) {\n\t\t\t// Set its value to true\n\t\t\tclickedMatch[0].clicked = true;\n\n\t\t\t// increment the appropriate counter\n\t\t\tcorrectGuesses++;\n\n\t\t\tclickMessage = 'Keep the momentum going!';\n\n\t\t\tif (correctGuesses > bestScore) {\n\t\t\t\tbestScore = correctGuesses;\n\t\t\t\tthis.setState({bestScore});\n\t\t\t}\n\n\t\t\t// Shuffle the array to be rendered in a random order\n\t\t\tmatches.sort(function (a, b) {\n\t\t\t\treturn 0.5 - Math.random();\n\t\t\t});\n\n\t\t\t// Set this.state.matches equal to the new matches array\n\t\t\tthis.setState({matches});\n\t\t\tthis.setState({correctGuesses});\n\t\t\tthis.setState({clickMessage});\n\t\t} else {\n\t\t\t// Set its value to true\n\t\t\tclickedMatch[0].clicked = true;\n\n\t\t\t// restart the guess counter\n\t\t\tcorrectGuesses = 0;\n\n\t\t\t// Egg on the user to play again\n\t\t\tclickMessage = 'Wohoo, You matched them all!';\n\t\t\tbestScore = 12;\n\t\t\tthis.setState({bestScore});\n\n\t\t\tfor (let i = 0; i < matches.length; i++) {\n\t\t\t\tmatches[i].clicked = false;\n\t\t\t}\n\n\t\t\t// Shuffle the array to be rendered in a random order\n\t\t\tmatches.sort(function (a, b) {\n\t\t\t\treturn 0.5 - Math.random();\n\t\t\t});\n\n\t\t\t// Set this.state.matches equal to the new matches array\n\t\t\tthis.setState({matches});\n\t\t\tthis.setState({correctGuesses});\n\t\t\tthis.setState({clickMessage});\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Title>The Clicking Game</Title>\n\n\t\t\t\t<h3 className=\"scoreSummary bg-success text-white\">{this.state.clickMessage}</h3>\n\n\t\t\t\t<h3 className=\"scoreSummary card-header bg-danger text-white\">\n\t\t\t\t\tCorrect Guesses: {this.state.correctGuesses}\n\t\t\t\t\t<br />\n\t\t\t\t\tBest Score: {this.state.bestScore}\n\t\t\t\t</h3>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t{this.state.matches.map((match) => (\n\t\t\t\t\t\t\t<MatchCard setClicked={this.setClicked} id={match.id} key={match.id} image={match.image} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}